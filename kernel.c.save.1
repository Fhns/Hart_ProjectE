// Shane's Operating System Kernel
// kernel.c

void printString(char*);
void readString(char*);
void readSector(char*, int);
void handleInterrupt(int, char*, int, int);
void readFile(char*, char*, int*);
//void executeProgram(char*);

void main() {

//	// ProjectA
//	int startVidMem = 0xb800;
//	int vidMemOffset = 0x0;
//	int white = 0x7;
//	char* letters = "Hello World\0";
//
//	while(*letters != 0x0) {
//		putInMemory(startVidMem, vidMemOffset, *letters);
//		vidMemOffset++;
//		putInMemory(startVidMem, vidMemOffset, white);
//		vidMemOffset++;
//		// advance letters pointer
//		letters++;
//	}
//
//  while(1);

//	// ProjectB
//	//Step 1: Printing to the Screen - Interrupt 0x10
//	//printString("Hello World");
//
//	// Step 2: Reading from the keyboard - Interrupt 0x16
//	//char line[80];
//	//printString("Enter a line: ");
//	//readString(line);
//	//printString(line);
//
//	// Step 3 - Read a sector from the disk - Interrupt 0x13
//	//char buffer[512];
//	//readSector(buffer, 30);
//	//printString(buffer);
//
//	// Step 4 - Create your own interrupt
//	//makeInterrupt21();
//	//interrupt(0x21, 0, 0, 0, 0);
//
//	// Step 5 - Make printString, readString, and readSector interrupt calls
//	char line[80];
//	makeInterrupt21();
//	interrupt(0x21, 1, line, 0, 0);
//	interrupt(0x21, 0, line, 0, 0);
//
//	while(1);

    // ProjectC
    // Step 1 - Read a file and print it
    char buffer[13312];   /*this is the maximum size of a file*/
    int sectorsRead;
    makeInterrupt21();
    interrupt(0x21, 3, "messag", buffer, &sectorsRead);   /*read the file into buffer*/
    if (sectorsRead>0)
        {
    	interrupt(0x21, 0, buffer, 0, 0);   /*print out the file*/
    } else {
    	interrupt(0x21, 0, "messag not found\r\n", 0, 0);  /*no sectors read? then print an error*/
    }
    while(1);   /*hang up*/

    //// Step 2 - Load a Program and Execute it
    //makeInterrupt21();
    //interrupt(0x21, 4, "tstpr1", 0, 0);
    //while(1);
}

// ProjectB
// Step 1: Printing to the Screen - Interrupt 0x10
void printString(char* chars)
{
	int i=0;
	while(chars[i] != '\0') {
		//interrupt(0x10, 0xe*256+'Q', 0, 0, 0);
		interrupt(0x10, 0xe*256+chars[i], 0, 0, 0);
		i++;
	}
}

// Step 2: Reading from the keyboard - Interrupt 0x16
void readString(char* chars)
{
	int i=0;
	while(1) {
		if(i > 80) {
			return;
		}
		chars[i] = interrupt(0x16, 0, 0, 0, 0);
		if(chars[i] == 0xd) {
			interrupt(0x10, 0xe*256+0xd, 0, 0, 0);
			interrupt(0x10, 0xe*256+0xa, 0, 0, 0);
			chars[i+1] = 0xa;
			chars[i+2] = 0x0;
			return;
		}
		else if(chars[i] == 0x8) {
			if(i > 0) {
				interrupt(0x10, 0xe*256+chars[i], 0, 0, 0);
				i--;
				chars[i] = ' ';
				interrupt(0x10, 0xe*256+chars[i], 0, 0, 0);
				interrupt(0x10, 0xe*256+0x8, 0, 0, 0);
			}
		}
		else if(chars[i] != ' ') {
			interrupt(0x10, 0xe*256+chars[i], 0, 0, 0);
			i++;
		}
	}
}

// Step 3 - Read a sector from the disk - Interrupt 0x13
void readSector(char* buffer, int sector)
{
	int relativeSector;
	int head;
	int track;
	relativeSector = mod(sector, 18) + 1;
	head = mod(div(sector, 18), 2);
	track = div(sector, 36);
	interrupt(0x13, 0x2*256+0x1, buffer, track*256+relativeSector, head*256+0);
}

int mod(int a, int b)
{
	while(a>=b) {
		a=a-b;
	}
	return a;
}

int div(int a, int b)
{
	int c=0;
	while((c+1)*b<=a) {
		c++;
	}
	return c;
}

// Step 4 - Create your own interrupt & Step 5 - Make printString, readString, and readSector interrupt calls
void handleInterrupt21(int ax, char* bx, int cx, int dx)
{
	if(ax=0) {
		printString(bx);
	}
	if(ax=1) {
                readString(bx);
        }
	if(ax=2) {
                readSector(bx, cx);
        }
	else {
		printString("error message");
	}
}

// ProjectC
// Step 1 - Read a file and print it
void readFile(char* buffer, char* filename, int* sectorsRead) 
{
	char directory[512];
	readSector(directory, 2);
	int entry;
	int letter;
	int fileExists;
	for (entry = 0; entry < 512; entry += 32) 
	{
		for (letter = 0; letter < 6; letter += 1
		{
			if (filename[letter] == directory[letter + entry])
			{
				fileExists = 0;
				break;
			}
		}
		fileExists = 1;
		if (fileExists == 1)
		{
			break;
		}
	}
	if (fileExists == 0)
	{
		*sectorsRead = 0;
		return;
	}
	int s;
	int sector;
	for (s = 6; s < 26; s += 1)
	{
		sector = directory[entry+s];
		if (sector = 0)
		{
			break;
		} else {
			readSector(buffer);
			buffer = buffer+512;
			*sectorsRead = *sectorsRead + 1;
			return;
		}
	}
	return;
}

// Fix
// Step 2 - Load a Program and Execute it
//void executeProgram(char* name) {
//	char buffer[13312];
//	int i, addr, segment;
//	setKernelDataSegment();
//	for (i = 0; i < 8; i += 1) {
//		if (processTable[i].active == 0)
//			break;
//	}
//	if (waitedOn == 1) {
//		processTable[currentProcess].waitingOn = i;
//	}
//	processTable[i].active = 1;
//	processTable[i].stackPointer = 0xff00;
//	restoreDataSegment();
//	segment = 0x1000 * (i + 2);
//	readFile(name, buffer);
//	for (addr = 0; addr < 13312; addr += 1) {
//		putInMemory(segment, addr, buffer[addr]);
//	}
//
//	initializeProgram(segment);
//}

//// Fix
//// Step 3 - Terminate program system call
//void terminate()
//{
//	while(1);
//{
